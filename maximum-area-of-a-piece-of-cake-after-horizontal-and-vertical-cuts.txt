class Solution {
    public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {

        // maximum horizontal cut
        Arrays.sort(horizontalCuts);
        long hmax = horizontalCuts[0];

        for (int i = 1; i < horizontalCuts.length; i++){

            if (horizontalCuts[i] - horizontalCuts[i-1] > hmax){
                hmax = horizontalCuts[i] - horizontalCuts[i-1];
            }
        }

        if (hmax < h - horizontalCuts[horizontalCuts.length-1]){
            hmax = h - horizontalCuts[horizontalCuts.length-1];
        }
        
        // maximum vertical cut 
        Arrays.sort(verticalCuts);
        long vmax = verticalCuts[0];

        for (int i = 1; i < verticalCuts.length; i++){

            if (verticalCuts[i] - verticalCuts[i-1] > vmax){
                vmax = verticalCuts[i] - verticalCuts[i-1];
            }
        }

        if (vmax < w - verticalCuts[verticalCuts.length-1]){
            vmax = w - verticalCuts[verticalCuts.length-1];
        }
        
        long res = (hmax * vmax) % 1000000007;
        return (int)res;
    }
}